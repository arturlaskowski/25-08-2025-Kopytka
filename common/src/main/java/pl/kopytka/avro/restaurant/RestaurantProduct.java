/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package pl.kopytka.avro.restaurant;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RestaurantProduct extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3695898989525720943L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RestaurantProduct\",\"namespace\":\"pl.kopytka.avro.restaurant\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"available\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<RestaurantProduct> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RestaurantProduct> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RestaurantProduct> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RestaurantProduct> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RestaurantProduct> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RestaurantProduct to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RestaurantProduct from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RestaurantProduct instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RestaurantProduct fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.lang.String name;
  private java.math.BigDecimal price;
  private boolean available;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RestaurantProduct() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param price The new value for price
   * @param available The new value for available
   */
  public RestaurantProduct(java.util.UUID id, java.lang.String name, java.math.BigDecimal price, java.lang.Boolean available) {
    this.id = id;
    this.name = name;
    this.price = price;
    this.available = available;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return price;
    case 3: return available;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: name = value$ != null ? value$.toString() : null; break;
    case 2: price = (java.math.BigDecimal)value$; break;
    case 3: available = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.math.BigDecimal getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.math.BigDecimal value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'available' field.
   * @return The value of the 'available' field.
   */
  public boolean getAvailable() {
    return available;
  }


  /**
   * Sets the value of the 'available' field.
   * @param value the value to set.
   */
  public void setAvailable(boolean value) {
    this.available = value;
  }

  /**
   * Creates a new RestaurantProduct RecordBuilder.
   * @return A new RestaurantProduct RecordBuilder
   */
  public static pl.kopytka.avro.restaurant.RestaurantProduct.Builder newBuilder() {
    return new pl.kopytka.avro.restaurant.RestaurantProduct.Builder();
  }

  /**
   * Creates a new RestaurantProduct RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RestaurantProduct RecordBuilder
   */
  public static pl.kopytka.avro.restaurant.RestaurantProduct.Builder newBuilder(pl.kopytka.avro.restaurant.RestaurantProduct.Builder other) {
    if (other == null) {
      return new pl.kopytka.avro.restaurant.RestaurantProduct.Builder();
    } else {
      return new pl.kopytka.avro.restaurant.RestaurantProduct.Builder(other);
    }
  }

  /**
   * Creates a new RestaurantProduct RecordBuilder by copying an existing RestaurantProduct instance.
   * @param other The existing instance to copy.
   * @return A new RestaurantProduct RecordBuilder
   */
  public static pl.kopytka.avro.restaurant.RestaurantProduct.Builder newBuilder(pl.kopytka.avro.restaurant.RestaurantProduct other) {
    if (other == null) {
      return new pl.kopytka.avro.restaurant.RestaurantProduct.Builder();
    } else {
      return new pl.kopytka.avro.restaurant.RestaurantProduct.Builder(other);
    }
  }

  /**
   * RecordBuilder for RestaurantProduct instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RestaurantProduct>
    implements org.apache.avro.data.RecordBuilder<RestaurantProduct> {

    private java.util.UUID id;
    private java.lang.String name;
    private java.math.BigDecimal price;
    private boolean available;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(pl.kopytka.avro.restaurant.RestaurantProduct.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.available)) {
        this.available = data().deepCopy(fields()[3].schema(), other.available);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing RestaurantProduct instance
     * @param other The existing instance to copy.
     */
    private Builder(pl.kopytka.avro.restaurant.RestaurantProduct other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.available)) {
        this.available = data().deepCopy(fields()[3].schema(), other.available);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public pl.kopytka.avro.restaurant.RestaurantProduct.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public pl.kopytka.avro.restaurant.RestaurantProduct.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public pl.kopytka.avro.restaurant.RestaurantProduct.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public pl.kopytka.avro.restaurant.RestaurantProduct.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.math.BigDecimal getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public pl.kopytka.avro.restaurant.RestaurantProduct.Builder setPrice(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public pl.kopytka.avro.restaurant.RestaurantProduct.Builder clearPrice() {
      price = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'available' field.
      * @return The value.
      */
    public boolean getAvailable() {
      return available;
    }


    /**
      * Sets the value of the 'available' field.
      * @param value The value of 'available'.
      * @return This builder.
      */
    public pl.kopytka.avro.restaurant.RestaurantProduct.Builder setAvailable(boolean value) {
      validate(fields()[3], value);
      this.available = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'available' field has been set.
      * @return True if the 'available' field has been set, false otherwise.
      */
    public boolean hasAvailable() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'available' field.
      * @return This builder.
      */
    public pl.kopytka.avro.restaurant.RestaurantProduct.Builder clearAvailable() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RestaurantProduct build() {
      try {
        RestaurantProduct record = new RestaurantProduct();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.price = fieldSetFlags()[2] ? this.price : (java.math.BigDecimal) defaultValue(fields()[2]);
        record.available = fieldSetFlags()[3] ? this.available : (java.lang.Boolean) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RestaurantProduct>
    WRITER$ = (org.apache.avro.io.DatumWriter<RestaurantProduct>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RestaurantProduct>
    READER$ = (org.apache.avro.io.DatumReader<RestaurantProduct>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










